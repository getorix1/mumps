
#include <stdio.h>
#include <stdarg.h>

void average(int num, ...) {

      va_list valist;
      int i;

      /* initialize valist for num number of arguments */
      va_start(valist, num);

      /* access all the arguments assigned to valist */
      for (i = 0; i < num; i++) {
            printf("%s\n", va_arg(valist, char*));
            }

      /* clean memory reserved for valist */
      va_end(valist);

      return ;
      }

int main() {
      average(5, "aaa", "bbbb","cccc","dddd","eeeee");
      }
//------------------------
//	GTK interface
//------------------------

static GtkTreeIter iter;
static GtkTreeIter iter1;
static GtkTreeIter iter2;
static GtkTreeIter iter3;
static GtkTreeIter iter4;
static GtkTreeIter iter5;
static GtkTreeIter iter6;
static GtkTreeIter iter7;
static GtkTreeIter iter8;
static GtkTreeIter iter9;
static GtkTreeIter iter10;
static GtkTreeStore *t;
static GtkSpinButton *spin;
static int column = 0;


//---------------------------------------------------------------------
//	tree~level~add(treeStore,treeDepth,col1,col2,col3,...)
//---------------------------------------------------------------------

void	tree_level_add(GtkTreeStore *tree, int depth,
                     char * col1) {


      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xcf");

      ??????

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }

void	mdh_tree_level_add(GtkTreeStore *tree, int depth,
                         char * col1, char * col2) {

//----------------------
//	xce open paren
//	xcf close paren
//	cd0 comma
//----------------------

      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col2);
      strcat(&tmp[1],"\xcf");

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }

void	mdh_tree_level_add(GtkTreeStore *tree, int depth,
                         char * col1, char * col2, char * col3) {

//----------------------
//	xce open paren
//	xcf close paren
//	cd0 comma
//----------------------

      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col2);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col3);
      strcat(&tmp[1],"\xcf");

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }

void	mdh_tree_level_add(GtkTreeStore *tree, int depth,
                         char * col1, char * col2, char * col3, char * col4) {

//----------------------
//	xce open paren
//	xcf close paren
//	cd0 comma
//----------------------

      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col2);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col3);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col4);
      strcat(&tmp[1],"\xcf");

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }

void	mdh_tree_level_add(GtkTreeStore *tree, int depth,
                         char * col1, char * col2, char * col3,
                         char * col4, char * col5) {

//----------------------
//	xce open paren
//	xcf close paren
//	cd0 comma
//----------------------

      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col2);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col3);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col4);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col5);
      strcat(&tmp[1],"\xcf");

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }

void	mdh_tree_level_add(GtkTreeStore *tree, int depth,
                         char * col1, char * col2, char * col3,
                         char * col4, char * col5, char *col6) {

//----------------------
//	xce open paren
//	xcf close paren
//	cd0 comma
//----------------------

      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col2);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col3);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col4);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col5);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col6);
      strcat(&tmp[1],"\xcf");

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }

void	mdh_tree_level_add(GtkTreeStore *tree, int depth,
                         char * col1, char * col2, char * col3,
                         char * col4, char * col5, char *col6,
                         char *col7) {

//----------------------
//	xce open paren
//	xcf close paren
//	cd0 comma
//----------------------

      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col2);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col3);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col4);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col5);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col6);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col7);
      strcat(&tmp[1],"\xcf");

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }

void	mdh_tree_level_add(GtkTreeStore *tree, int depth,
                         char * col1, char * col2, char * col3,
                         char * col4, char * col5, char * col6,
                         char * col7, char * col8) {

//----------------------
//	xce open paren
//	xcf close paren
//	cd0 comma
//----------------------

      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col2);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col3);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col4);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col5);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col6);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col7);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col8);
      strcat(&tmp[1],"\xcf");

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }

void	mdh_tree_level_add(GtkTreeStore *tree, int depth,
                         char * col1, char * col2, char * col3,
                         char * col4, char * col5, char * col6,
                         char * col7, char * col8, char * col9) {

//----------------------
//	xce open paren
//	xcf close paren
//	cd0 comma
//----------------------

      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col2);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col3);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col4);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col5);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col6);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col7);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col8);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col9);
      strcat(&tmp[1],"\xcf");

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }

void	mdh_tree_level_add(GtkTreeStore *tree, int depth,
                         char * col1, char * col2, char * col3,
                         char * col4, char * col5, char * col6,
                         char * col7, char * col8, char * col9,
                         char * col10) {

//----------------------
//	xce open paren
//	xcf close paren
//	cd0 comma
//----------------------

      char tmp[4096], tmp1[256], tmp2[256];
      strcpy(&tmp[1],"$z~mdh~tree~level~add");
      strcat(&tmp[1],"\xce");

      sprintf(tmp1, "%p", tree);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      sprintf(tmp1, "%d", depth);
      strcat(&tmp[1],tmp1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col1);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col2);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col3);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col4);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col5);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col6);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col7);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col8);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col9);
      strcat(&tmp[1],"\xd0");

      strcat(&tmp[1],col10);
      strcat(&tmp[1],"\xcf");

      zfcn((unsigned char *) tmp, (unsigned char *) tmp2, svPtr);
      }



//---------------------------------------------------------------------
//	$z~mdh~tree~selection~get~selected(TreeModelReference,column)
//---------------------------------------------------------------------

char *	mdh_tree_selection_get_selected(GtkTreeSelection *t, int col, char *txt) {

      GtkTreeModel *m;
      gchar *value;
      GtkTreeIter iter;

      strcpy(txt,"");

      if (gtk_tree_selection_get_selected (t, &m, &iter) == FALSE)
            return txt;

      gtk_tree_model_get(m, &iter, col, &value, -1);

      strcpy(txt, value);

      return txt;

      }

//----------------------------------------------------
//	$z~mdh~tree~store~clear(TreeStoreReference)
//----------------------------------------------------

void	mdh_tree_store_clear(GtkTreeStore *t) {
      gtk_tree_store_clear (t);
      }


//AAAAAAAAAAAAAAAAAAA



GtkTreeViewGetSelection:

if (nargs != 1 ) goto err;

      {
      GtkTreeView *t;
      GtkTreeSelection *s;
      sscanf((const char *) &v1d[1], "%p", &t);
      s = gtk_tree_view_get_selection(t);
      sprintf((char *) bd, "%p", s);
      return;
      }

GtkTreeLevelAdd:

if (nargs < 4 ) goto err;

int depth;

sscanf((const char *) &v1d[iargs[1]], "%d", &depth);

if (depth == 1) goto GtkTreeLevel1Add;
if (depth == 2) goto GtkTreeLevel2Add;
if (depth == 3) goto GtkTreeLevel3Add;
if (depth == 4) goto GtkTreeLevel4Add;
if (depth == 5) goto GtkTreeLevel5Add;
if (depth == 6) goto GtkTreeLevel6Add;
if (depth == 7) goto GtkTreeLevel7Add;
if (depth == 8) goto GtkTreeLevel8Add;
if (depth == 9) goto GtkTreeLevel9Add;
if (depth == 10) goto GtkTreeLevel10Add;

//------------------------------------------------------------
//	v1d[1]		-> treestore
//	v1d[iargs[1]]	-> depth in tree for 1st column
//------------------------------------------------------------

GtkTreeLevel1Add:

      {
      GtkTreeAdd(&iter, NULL, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }

GtkTreeLevel2Add:

      {
      GtkTreeAdd(&iter1, &iter, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }

GtkTreeLevel3Add:

      {
      GtkTreeAdd(&iter2, &iter1, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }

GtkTreeLevel4Add:

      {
      GtkTreeAdd(&iter3, &iter2, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }

GtkTreeLevel5Add:

      {
      GtkTreeAdd(&iter4, &iter3, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }

GtkTreeLevel6Add:

      {
      GtkTreeAdd(&iter5, &iter4, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }

GtkTreeLevel7Add:

      {
      GtkTreeAdd(&iter6, &iter5, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }

GtkTreeLevel8Add:

      {
      GtkTreeAdd(&iter7, &iter6, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }

GtkTreeLevel9Add:

      {
      GtkTreeAdd(&iter8, &iter7, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }

GtkTreeLevel10Add:

      {
      GtkTreeAdd(&iter9, &iter8, &v1d[1], v1d, iargs, nargs);
      strcpy((char *) bd, "0");
      return;
      }



//BBBBBBBBBBBBBBBBBBBBB

void	GtkTreeAdd(GtkTreeIter *itera, GtkTreeIter *iterb, unsigned char * treestore,
                 unsigned char * v1d, short int * iargs, short int nargs) {

//------------------------------------------------------
//	v1d[1]		-> treestore (pointer)
//	v1d[iargs[1]]	-> depth in tree (integer)
//------------------------------------------------------

      static GtkTreeStore *t;

      sscanf((const char *) treestore, "%p", &t); // get GtkTreeStore ptr

      gtk_tree_store_append (t, itera, iterb);

      gtk_tree_store_set(t, itera, 0, &v1d[iargs[2]], -1); // column 0

      if (nargs == 3) return;

      gtk_tree_store_set(t, itera, 1, &v1d[iargs[3]], -1); // column 1

      if (nargs == 4) return;

      gtk_tree_store_set(t, itera, 2, &v1d[iargs[4]], -1); // column 2

      if (nargs == 5) return;

      gtk_tree_store_set(t, itera, 3, &v1d[iargs[5]], -1); // column 3

      if (nargs == 6) return;

      gtk_tree_store_set(t, itera, 4, &v1d[iargs[6]], -1); // column 4

      if (nargs == 7) return;

      gtk_tree_store_set(t, itera, 5, &v1d[iargs[7]], -1); // column 5

      if (nargs == 8) return;

      gtk_tree_store_set(t, itera, 6, &v1d[iargs[8]], -1); // column 6

      if (nargs == 9) return;

      gtk_tree_store_set(t, itera, 7, &v1d[iargs[9]], -1); // column 6

      if (nargs == 10) return;

      gtk_tree_store_set(t, itera, 8, &v1d[iargs[10]], -1); // column 7

      if (nargs == 10) return;

      gtk_tree_store_set(t, itera, 9, &v1d[iargs[11]], -1); // column 8

      if (nargs == 11) return;

      gtk_tree_store_set(t, itera, 10, &v1d[iargs[12]], -1); // column 9

      if (nargs == 12) return;

      gtk_tree_store_set(t, itera, 11, &v1d[iargs[13]], -1); // column 10

      if (nargs == 13) return;

      }
