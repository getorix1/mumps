
// ==============================================================
//#+ This module generated by Mumps Compiler @VERSION@ Apr  3 2024
//#+  
//#+ Portions of this code are part of the Mumps Compiler
//#+ 
//#+ Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 
//#+ 2010, 2017, 2020, 2022 by Kevin C. O'Kane  
//#+ 
//#+ Kevin C. O'Kane, Ph.D.
//#+ Professor Emeritus
//#+ Computer Science Department
//#+ University of Northern Iowa
//#+ Cedar Falls, IA 50614-0507
//#+ kc.okane@gmail.com
//#+ https://threadsafebooks.com
//#+ https://www.cs.uni.edu/~okane
//#+ -----------------------------------
//#+ 
//#+ Consult individual modules for copyright details
//#+ The runtime libraries are covered by the following license:
//#+  
//#+ This library is free software; you can redistribute it and/or
//#+ modify it under the terms of the GNU Lesser General Public
//#+ License as published by the Free Software Foundation; either
//#+ version 2.1 of the License, or (at your option) any later version.
//#+ 
//#+ This library is distributed in the hope that it will be useful,
//#+ but WITHOUT ANY WARRANTY; without even the implied warranty of
//#+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//#+ Lesser General Public License for more details.
//#+ 
//#+ You should have received a copy of the GNU Lesser General Public
//#+ License along with this library; if not, write to the Free Software
//#+ Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//#+ 
//#+ This code is unverified - use at your own risk 
//#+==============================================================

#undef _MDH_
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <setjmp.h>
#include <unistd.h>
#include <signal.h>
#include <sys/time.h>
#include <mumpsc/inline.h>
#include <mumpsc/defines.h>
#include <mumpsc/strmax.h>
#include <mumpsc/libmpscpp.h>
#include <mumpsc/sym.h>
#include <mumpsc/builtin.h>
#include <mumpsc/compiler.h>
#define FORPARM STR_MAX  /* Size of For loop parameter */
#define CSTR (char *)
#define USTR unsigned char *
#define CCHR const char *
#include <mumpsc/keyfix.h>
#include <mumpsc/globalOrder.h>
#include <mumpsc/stateVector.h>
int (*__label_lookup)(char *);
char * (*__text_function)(int);
void fcn(MSV *);
void zfcn(unsigned char *, unsigned char *, struct MSV *); /* z functions */
char * sym_(int, unsigned char *, unsigned char *, struct MSV *); /* symbol table */
char * makeLock(char *, char *, char *, char, char *); /* global array lock service */
char * cleanLocks(char *); /* global array lock service */
char * releaseLock(char *, char *, char *); /* global array lock service */
char * eraseLocks(char *); /* global array lock service */
void add(const char *a,const char *b,char *c); /* math function */
void sub(const char *a,const char *b,char *c); /* math function */
void mult(const char *a,const char *b,char *c); /* math function */
void divx(const char *a,const char *b,char *c); /* math function */
void divi(const char *a,const char *b,char *c); /* math function */
void _fnumber(unsigned char *,unsigned char *,
       unsigned char *,unsigned char *, MSV *); /* math function */
int DBSem = 0; /* deadlock prevention */
void SyncClock() {
    DBSem = 1;
    }
unsigned int set_alarm (unsigned int seconds) {
    struct itimerval old, xnew;
    xnew.it_interval.tv_usec = 0;
    xnew.it_interval.tv_sec = 0 ; // interval between alarms
    xnew.it_value.tv_usec = 0;
    xnew.it_value.tv_sec = (long int) 0;
    if (setitimer (ITIMER_REAL, &xnew, &old) < 0)
        return 0;
    else
        return old.it_value.tv_sec;
    }
#include <mumpsc/global.h>  /* Global array definitions */
  /* Interface to Mglobal(): */
  /* g = command */
  /* key = key sought or stored */
  /* bd = value returned or stored */
  /* svPtr = address of state vector */
#ifndef SUB
#include <mumpsc/fcns.h>  /* System support functions */
#include <mumpsc/sysfunc.h>  /* Many common global variables */
#endif
 // !/usr/bin/mumps
 // +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 // +   
 // +     Mumps Compiler Example Code
 // +     Copyright (C) A.D. 2000, 2001, 2002 by Kevin C. O'Kane  
 // +
 // +     Kevin C. O'Kane
 // +     Department of Computer Science
 // +     University of Northern Iowa
 // +     Cedar Falls, IA 50613-0507 USA
 // +
 // +     okane@cs.uni.edu
 // +     anamfianna@earthlink.net
 // +     http://www.cs.uni.edu/~okane
 // +
 // +
 // + This program is free software; you can redistribute it and/or modify
 // + it under the terms of the GNU General Public License as published by
 // + the Free Software Foundation; either version 2 of the License, or
 // + (at your option) any later version.
 // + 
 // + This program is distributed in the hope that it will be useful,
 // + but WITHOUT ANY WARRANTY; without even the implied warranty of
 // + MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 // + GNU General Public License for more details.
 // + 
 // + You should have received a copy of the GNU General Public License
 // + along with this program; if not, write to the Free Software
 // + Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 // +
 // ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//================================================================================= 
//       zmain 
//================================================================================= 

int main(int argc, char *argv[]) {

//#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//#+ Intermediate temporary variables used during execution of string expressions
//#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

char *_ftmp = new char[STR_MAX]; /* intermediate temp */
/*** Temporary variables */
jmp_buf for0J;
jmp_buf Efor0J;
int tpx0;
unsigned char *tmp0 = new unsigned char[STR_MAX];
unsigned char *tmp1 = new unsigned char[STR_MAX];
unsigned char *tmp2 = new unsigned char[STR_MAX];
unsigned char *_dummy = new unsigned char[STR_MAX]; /* temporary variable */
unsigned char *atmp =new unsigned char[STR_MAX]; /* temporary variable */
unsigned char *xgtmp = new unsigned char [STR_MAX]; /* temporary variable */
unsigned char *gtmpL = new unsigned char[STR_MAX]; /* temporary variable */
unsigned char *tmp = new unsigned char[STR_MAX]; /* temporary variable */
unsigned char *gtmp = new unsigned char [2*STR_MAX]; /* temporary variable */
int _label_lookup(char *); /* resolution of labels */
char * _text_function(int);
static unsigned char _ReturnVal[STR_MAX]; /* function returns */
int _ArgCount=0; /* Nbr of args to extrinsic */
long _i,_jj,_j,_k,_new;
int _SymPush=0,f=0;
int g=0;
jmp_buf _doStack[128]; /* <do> return stack mechanism */
short   _doStackN[128]={0}; /* <do> return stack mechanism */
static int     _doStx=0; /* <do> return stack mechanism */
char _Refs[10][32];
int _Refsx=0;

if (svPtr == NULL) svPtr = AllocSV();

_SymPush=0; // zap pushed tables 

svPtr->in_file[5]=stdin; // console default/
svPtr->out_file[5]=stdout; // console default

strcpy(svPtr->UDAT,"data.dat");
strcpy(svPtr->UKEY,"key.dat");

if ( 0) { // no alarm if slice is zero
	signal(SIGALRM, SyncClock);
	set_alarm(1);
	}

__label_lookup = _label_lookup;
__text_function = _text_function;

$SymPut("%",argv[0]); 

if (argc > 0) { 
	for (int i = 0; i < argc; i++) { 
		char t[STR_MAX]; 
		sprintf(t,"%%%d", i); 
		$SymPut(t, argv[i]); 
		} 
	} 

try { 
//================================================================================= 
svPtr->LineNumber=34; //       write !,"Operators ...",!! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Operators ...");
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=36; //       write "Test",?30,"Expected",?50,"Actual",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Test");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Expected");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Actual");
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=37; //       write "Unary +",?30,"27.3",?50,+"27.3 days",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Unary +");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"27.3");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	add( (char *) "27.3 days", (char *) "0", (char *) tmp0);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=38; //       write "Unary - ",?30,"-3.14",?50,-"3.14 radians",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Unary - ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"-3.14");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	mult((char *) "3.14 radians","-1",(char *) tmp0);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=39; //       write "Sum ",?30,"4.718",?50,2.718+"2 above e",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Sum ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"4.718");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	add((char *) "2.718", (char *) "2 above e", (char *) tmp0); 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=40; //       write "Difference ",?30,"-4.18",?50,2.12-"6.3 eV",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Difference ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"-4.18");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	sub((char *) "2.12",(char *) "6.3 eV",(char *) tmp0);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=41; //       write "Product ",?30,"2.01588",?50,1.00794*"2 atoms/H2",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Product ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"2.01588");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	mult((char *) "1.00794", (char *) "2 atoms/H2", (char *) tmp0);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=42; //       write "Division ",?30,"12",?50,144.132/12.011,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Division ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"12");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	divx((char *) "144.132",(char *) "12.011",(char *) tmp0);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=43; //       write "Integer Division ",?30,"2",?50,82.8\"29.5 years/orbit",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Integer Division ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"2");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	divi((const char *) "82.8",(const char *) "29.5 years/orbit",(char *) tmp0);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=45; //       write "Modulo works like C modulo",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Modulo works like C modulo");
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=46; //       write "Modulo ",?30,"2",?50,42#5,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Modulo ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"2");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	_i=atoi((char *) "5");
	_j=atoi((char *) "42");
	_i=_j%_i;
	Mltoa(_i, tmp0);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=47; //       write "Modulo ",?30,"2",?50,-42#5,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Modulo ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"2");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	mult((char *) "42","-1",(char *) tmp0);
	_i=atoi((char *) "5");
	_j=atoi((char *) tmp0);
	_i=_j%_i;
	Mltoa(_i, tmp1);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=48; //       write "Modulo ",?30,"-2",?50,42#-5,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Modulo ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"-2");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	mult((char *) "5","-1",(char *) tmp0);
	_i=atoi((char *) tmp0);
	_j=atoi((char *) "42");
	_i=_j%_i;
	Mltoa(_i, tmp1);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=49; //       write "Modulo ",?30,"-2",?50,-42#-5,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Modulo ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"-2");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	mult((char *) "42","-1",(char *) tmp0);
	mult((char *) "5","-1",(char *) tmp1);
	_i=atoi((char *) tmp1);
	_j=atoi((char *) tmp0);
	_i=_j%_i;
	Mltoa(_i, tmp2);
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp2);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=51; //       write "Less Than ",?30,"1",?50,1642<1879,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Less Than ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1((USTR) "1642",1879)<0) strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=52; //       write "Less Than ",?30,"0",?50,1942<1879,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Less Than ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1((USTR) "1942",1879)<0) strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=53; //       write "Not Less Than ",?30,"0",?50,1642'<1879,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Less Than ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp( (USTR) "1642", (USTR) "1879")>=0) strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=54; //       write "Not Less Than ",?30,"1",?50,1942'<1879,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Less Than ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp( (USTR) "1942", (USTR) "1879")>=0) strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=55; //       write "Greater Than ",?30,"0 ",?50,1452>1564,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Greater Than ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1((USTR) "1452", 1564) > 0) strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=56; //       write "Greater Than ",?30,"1 ",?50,1652>1564,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Greater Than ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1((USTR) "1652", 1564) > 0) strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=57; //       write "Not Greater Than ",?30,"1 ",?50,1452'>1564,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Greater Than ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp((USTR) "1452", (USTR) "1564") <= 0) strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=58; //       write "Not Greater Than ",?30,"0 ",?50,1652'>1564,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Greater Than ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp((USTR) "1652", (USTR) "1564") <= 0) strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=60; //       write "Concatenate ",?30,"Feynman 1918",?50,"Feynman "_1918,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Concatenate ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Feynman 1918");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strlen((const char *) "Feynman ") + strlen((const char *) "1918") + 1 > STR_MAX) ErrorMessage("String too long",svPtr->LineNumber);
	strmove( (USTR) tmp0, (USTR) "Feynman ");
	strcat( (char *) tmp0, (char *) "1918");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=62; //       write "Equals ",?30,"1",?50,1969-5=1964,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	sub((char *) "1969",(char *) "5",(char *) tmp0);
	if (strcmp((const char *) tmp0,(const char *) "1964")==0) 
	strmove( (USTR) tmp1, (USTR) "1");
	else strmove( (USTR) tmp1, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=63; //       write "Equals ",?30,"0",?50,1967="1967: M",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "1967",(const char *) "1967: M")==0) 
	strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=64; //       write "Equals ",?30,"1",?50,1966=01966,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "1966",(const char *) "1966")==0) 
	strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=65; //       write "Equals ",?30,"0",?50,1966="01966",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "1966",(const char *) "01966")==0) 
	strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=66; //       write "Equals ",?30,"2",?50,"Lovelace"="Hopper"+2,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"2");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "Lovelace",(const char *) "Hopper")==0) 
	strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	add( (char *) tmp0, "2", (char *) tmp1 ); 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=67; //       write "Equals ",?30,"3",?50,"Lovelace"="Lovelace"+2,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"3");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "Lovelace",(const char *) "Lovelace")==0) 
	strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	add( (char *) tmp0, "2", (char *) tmp1 ); 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=69; //       write "not equals ",?30,"0 ",?50,1969-5'=1964,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"not equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	sub((char *) "1969",(char *) "5",(char *) tmp0);
	if (strcmp((const char *) tmp0, (const char *) "1964") != 0)
		strmove((USTR) tmp1, (USTR) "1");
	else strmove((USTR) tmp1, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=70; //       write "not equals ",?30,"1 ",?50,1967'="1967: M",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"not equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "1967", (const char *) "1967: M") != 0)
		strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=71; //       write "not equals ",?30,"0 ",?50,1966'=01966,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"not equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "1966", (const char *) "1966") != 0)
		strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=72; //       write "not equals ",?30,"1 ",?50,1966'="01966",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"not equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "1966", (const char *) "01966") != 0)
		strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=73; //       write "not equals ",?30,"3 ",?50,"Lovelace"'="Hopper"+2,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"not equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"3 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "Lovelace", (const char *) "Hopper") != 0)
		strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	add( (char *) tmp0, "2", (char *) tmp1 ); 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=74; //       write "not equals ",?30,"2 ",?50,"Lovelace"'="Lovelace"+2,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"not equals ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"2 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "Lovelace", (const char *) "Lovelace") != 0)
		strmove((USTR) tmp0, (USTR) "1");
	else strmove((USTR) tmp0, (USTR) "0");
	add( (char *) tmp0, "2", (char *) tmp1 ); 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=76; //       write "Contains ",?30,"1 ",?50,"Darwin"["win",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Contains ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strstr((const char *) "Darwin", (const char *)"win")) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=77; //       write "Not Contains ",?30,"1 ",?50,"Darwin"["wix",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Contains ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strstr((const char *) "Darwin", (const char *)"wix")) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=78; //       write "Contains ",?30,"1 ",?50,"Linnaeus"["",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Contains ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strstr((const char *) "Linnaeus", (const char *)"")) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=80; //       write "Follows ",?30,"0 ",?50,"COPERNICUS"]"KEPLER",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Follows ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "COPERNICUS",(const char *) "KEPLER")>0) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=81; //       write "Follows ",?30,"1 ",?50,"XOPERNICUS"]"KEPLER",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Follows ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "XOPERNICUS",(const char *) "KEPLER")>0) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=82; //       write "Not Follows ",?30,"1 ",?50,"COPERNICUS"']"KEPLER",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Follows ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "COPERNICUS",(const char *) "KEPLER")<=0) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=83; //       write "Not Follows ",?30,"0 ",?50,"XOPERNICUS"']"KEPLER",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Follows ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (strcmp((const char *) "XOPERNICUS",(const char *) "KEPLER")<=0) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=85; //       write "Pattern ",?30,"0 ",?50,"Leakey"?1a,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Leakey", (const unsigned char *) "1a",svPtr)) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0,(USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=86; //       write "Pattern ",?30,"1 ",?50,"Boaz"?1.a,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Boaz", (const unsigned char *) "1.a",svPtr)) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0,(USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=87; //       write "Pattern ",?30,"1 ",?50,"Fossey"?1u.5l,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Fossey", (const unsigned char *) "1u.5l",svPtr)) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0,(USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=88; //       write "Pattern ",?30,"0 ",?50,"Goodall"?.4l.p6c.e,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Goodall", (const unsigned char *) ".4l.p6c.e",svPtr)) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0,(USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=89; //       write "Pattern ",?30,"1 ",?50,"Maslow"?.E1"low".CNP,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Maslow", (const unsigned char *) ".E1\"low\".CNP",svPtr)) strmove((USTR) tmp0, (USTR) "1"); else strmove((USTR) tmp0,(USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=90; //       write "Not Pattern ",?30,"1 ",?50,"Leakey"'?1a,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Leakey", (const unsigned char *) "", svPtr)) strmove( (USTR) tmp0, (USTR) "0"); else strmove( (USTR) tmp0, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=91; //       write "Not Pattern ",?30,"0 ",?50,"Boaz"'?1.a,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Boaz", (const unsigned char *) "", svPtr)) strmove( (USTR) tmp0, (USTR) "0"); else strmove( (USTR) tmp0, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=92; //       write "Not Pattern ",?30,"0 ",?50,"Fossey"'?1u.5l,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Fossey", (const unsigned char *) "", svPtr)) strmove( (USTR) tmp0, (USTR) "0"); else strmove( (USTR) tmp0, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=93; //       write "Not Pattern ",?30,"1 ",?50,"Goodall"'?.4l.p6c.e,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Goodall", (const unsigned char *) "", svPtr)) strmove( (USTR) tmp0, (USTR) "0"); else strmove( (USTR) tmp0, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=94; //       write "Not Pattern ",?30,"0 ",?50,"Maslow"'?.E1"low".CNP,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Pattern ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (pm( (const unsigned char *) "Maslow", (const unsigned char *) "", svPtr)) strmove( (USTR) tmp0, (USTR) "0"); else strmove( (USTR) tmp0, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=96; //       write "And ",?30,"0 ",?50,"Watson"&"Crick",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp( (USTR) "Watson", (USTR) "0") && numcomp( (USTR) "Crick", (USTR) "0")) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=97; //       write "And ",?30,"0 ",?50,"Morgan"&1735,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp( (USTR) "Morgan", (USTR) "0") && numcomp( (USTR) "1735", (USTR) "0")) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=98; //       write "And ",?30,"1 ",?50,1838&1839,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp( (USTR) "1838", (USTR) "0") && numcomp( (USTR) "1839", (USTR) "0")) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=99; //       write "And ",?30,"1 ",?50,-12000&1996,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	mult((char *) "12000","-1",(char *) tmp0);
	if (numcomp( (USTR) tmp0, (USTR) "0") && numcomp( (USTR) "1996", (USTR) "0")) strmove( (USTR) tmp1, (USTR) "1"); else strmove( (USTR) tmp1, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=100; //       write "And ",?30,"0 ",?50,1859&0,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp( (USTR) "1859", (USTR) "0") && numcomp( (USTR) "0", (USTR) "0")) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=101; //       write "Not And ",?30,"1 ",?50,"Watson"'&"Crick",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "Watson", 0) && numcomp1( (USTR) "Crick", 0)) strmove( (USTR) tmp0, (USTR) "0"); else strmove( (USTR) tmp0, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=102; //       write "Not And ",?30,"1 ",?50,"Morgan"'&1735,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "Morgan", 0) && numcomp1( (USTR) "1735", 0)) strmove( (USTR) tmp0, (USTR) "0"); else strmove( (USTR) tmp0, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=103; //       write "Not And ",?30,"0 ",?50,1838'&1839,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "1838", 0) && numcomp1( (USTR) "1839", 0)) strmove( (USTR) tmp0, (USTR) "0"); else strmove( (USTR) tmp0, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=104; //       write "Not And ",?30,"0 ",?50,-12000'&1996,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	mult((char *) "12000","-1",(char *) tmp0);
	if (numcomp1( (USTR) tmp0, 0) && numcomp1( (USTR) "1996", 0)) strmove( (USTR) tmp1, (USTR) "0"); else strmove( (USTR) tmp1, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=105; //       write "Not And ",?30,"1 ",?50,1859'&0,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not And ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "1859", 0) && numcomp1( (USTR) "0", 0)) strmove( (USTR) tmp0, (USTR) "0"); else strmove( (USTR) tmp0, (USTR) "1");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=107; //       write "Or ",?30,"0 ",?50,"Jennifer"!"Pasteur",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Or ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "Jennifer", 0) || numcomp1( (USTR) "Pasteur", 0)) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=108; //       write "Or ",?30,"1 ",?50,"Hoffman"!1928,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Or ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "Hoffman", 0) || numcomp1( (USTR) "1928", 0)) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=109; //       write "Or ",?30,"1 ",?50,1898!-400,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Or ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	mult((char *) "400","-1",(char *) tmp0);
	if (numcomp1( (USTR) "1898", 0) || numcomp1( (USTR) tmp0, 0)) strmove( (USTR) tmp1, (USTR) "1"); else strmove( (USTR) tmp1, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=110; //       write "Or ",?30,"1 ",?50,1867!0,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Or ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "1867", 0) || numcomp1( (USTR) "0", 0)) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=111; //       write "Not Or ",?30,"1 ",?50,"Jennifer"'!"Pasteur",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Or ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "Jennifer", 0) || numcomp1( (USTR) "Pasteur", 0)) 
		strmove( (USTR) tmp0, (USTR) "0"); 
	else strmove( (USTR) tmp0, (USTR) "1"); 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=112; //       write "Not Or ",?30,"0 ",?50,"Hoffman"'!1928,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Or ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "Hoffman", 0) || numcomp1( (USTR) "1928", 0)) 
		strmove( (USTR) tmp0, (USTR) "0"); 
	else strmove( (USTR) tmp0, (USTR) "1"); 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=113; //       write "Not Or ",?30,"0 ",?50,1898'!-400,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Or ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	mult((char *) "400","-1",(char *) tmp0);
	if (numcomp1( (USTR) "1898", 0) || numcomp1( (USTR) tmp0, 0)) 
		strmove( (USTR) tmp1, (USTR) "0"); 
	else strmove( (USTR) tmp1, (USTR) "1"); 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=114; //       write "Not Or ",?30,"0 ",?50,1867'!0,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not Or ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "1867", 0) || numcomp1( (USTR) "0", 0)) 
		strmove( (USTR) tmp0, (USTR) "0"); 
	else strmove( (USTR) tmp0, (USTR) "1"); 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=116; //       set a=3 
//================================================================================= 
	sym_(0, (USTR) "a", (USTR) "3", svPtr); // Store result 
//================================================================================= 
svPtr->LineNumber=117; //       set a=a**2 
//================================================================================= 
	if (sym_(SYMGET, (USTR) "a", (USTR) tmp1, svPtr) == NULL) 
		VariableNotFound1(svPtr->LineNumber, (USTR) "a");
	expx((const char *) tmp1, (const char *) "2", (char *) tmp2);
	sym_(0, (USTR) "a", (USTR) tmp2, svPtr); // Store result 
//================================================================================= 
svPtr->LineNumber=118; //       write "exponentiation ",?30,"9",?50,a,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"exponentiation ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"9");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (sym_(SYMGET, (USTR) "a", (USTR) tmp0, svPtr) == NULL) 
		VariableNotFound1(svPtr->LineNumber, (USTR) "a");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=119; //       set a=9 
//================================================================================= 
	sym_(0, (USTR) "a", (USTR) "9", svPtr); // Store result 
//================================================================================= 
svPtr->LineNumber=120; //       set a=a**.5 
//================================================================================= 
	if (sym_(SYMGET, (USTR) "a", (USTR) tmp1, svPtr) == NULL) 
		VariableNotFound1(svPtr->LineNumber, (USTR) "a");
	expx((const char *) tmp1, (const char *) ".5", (char *) tmp2);
	sym_(0, (USTR) "a", (USTR) tmp2, svPtr); // Store result 
//================================================================================= 
svPtr->LineNumber=121; //       write "exponentiation ",?30,"3",?50,a,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"exponentiation ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"3");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (sym_(SYMGET, (USTR) "a", (USTR) tmp0, svPtr) == NULL) 
		VariableNotFound1(svPtr->LineNumber, (USTR) "a");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=123; //       write "Not ",?30,"1 ",?50,'"Turing",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "Turing", 0)==0) 
		strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp0);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=124; //       write "Not ",?30,"0",?50,''"Babbage",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"0");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "Babbage",0) == 0) strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	if (numcomp1( (USTR) tmp0, 0)==0) 
		strmove( (USTR) tmp1, (USTR) "1");
	else strmove( (USTR) tmp1, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=125; //       write "Not ",?30,"1 ",?50,'"Backus"&1957,! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp1( (USTR) "Backus", 0)==0) 
		strmove( (USTR) tmp0, (USTR) "1");
	else strmove( (USTR) tmp0, (USTR) "0");
	if (numcomp( (USTR) tmp0, (USTR) "0") && numcomp( (USTR) "1957", (USTR) "0")) strmove( (USTR) tmp1, (USTR) "1"); else strmove( (USTR) tmp1, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=126; //       write "Not ",?30,"1 ",?50,'("Wirth"&"Codd"),! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"Not ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"30", svPtr->out_file[svPtr->io]); // tab operator
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		"1 ");
	 _Column(&svPtr->hor[svPtr->io], &svPtr->ver[svPtr->io], 
"50", svPtr->out_file[svPtr->io]); // tab operator
	if (numcomp( (USTR) "Wirth", (USTR) "0") && numcomp( (USTR) "Codd", (USTR) "0")) strmove( (USTR) tmp0, (USTR) "1"); else strmove( (USTR) tmp0, (USTR) "0");
	if (numcomp1( (USTR) tmp0, 0)==0) 
		strmove( (USTR) tmp1, (USTR) "1");
	else strmove( (USTR) tmp1, (USTR) "0");
	svPtr->hor[svPtr->io] += fprintf(svPtr->out_file[svPtr->io], "%s", 
		tmp1);
	fprintf(svPtr->out_file[svPtr->io], "\n"); 
	svPtr->hor[svPtr->io]=0; svPtr->ver[svPtr->io]++; 
//================================================================================= 
svPtr->LineNumber=128; //       write "Indirection",?30,"123",?50,@"100+23",! 
//================================================================================= 
	if (svPtr->out_file[svPtr->io]==NULL) 
		ErrorMessage("Write to input file", svPtr->LineNumber); // W1001 
	_jj = Interpret( (CCHR) 
		"w \"Indirection\",?30,\"123\",?50,@\"100+23\",!", svPtr); 
	svPtr->ERROR = _jj; 
	if (!svPtr->NOERR && _jj < 0) 
		ErrorMessage("Indirection error", svPtr->LineNumber); 

//=================================================================================
_epilogue: tmp0[0]=0; tmp1[0]=0;  /*  Function Epilogue */
	Mltoa(getpid(),atmp);
	if (svPtr->LockDone) cleanLocks((char *) atmp);
	Mglobal(CLOSE,tmp0,tmp1,svPtr);  /* Close Globals */

} // end of try block 

catch(...) { 
     if (GlobalExceptionCode == INPUT_ERROR) cout << "Input Error" << endl;
     else if (GlobalExceptionCode == INPUT_LENGTH) cout << "Input Length Error" << endl;
     else if (GlobalExceptionCode == SYMTAB_ERROR) cout << "Symbol Table Error" << endl;
     else if (GlobalExceptionCode == GLOBAL_NOT_FOUND) cout << "Global Not Found Error" << endl;
     else if (GlobalExceptionCode == INTERPRETER_ERROR) cout << "Interprerer Error" << endl;
     else if (GlobalExceptionCode == INVALID_CONVERSION) cout << "Invalid Conversion Error" << endl;
     else if (GlobalExceptionCode == DATA_RANGE_ERROR) cout << "Data Range Error" << endl;
     else if (GlobalExceptionCode == NUMERIC_RANGE) cout << "Numeric Range Error" << endl;
     else if (GlobalExceptionCode == UNSPECIFIED) cout << "Unspecified Error" << endl;
	cout << "Uncaught error in or near line " 
	<< svPtr->LineNumber << endl;
	Mglobal(CLOSE,tmp0,tmp1,svPtr);  /* Close Globals */
	} 

return EXIT_SUCCESS; }  /* Terminate */
//=================================================================================


int _label_lookup(char *label) { return -1; }
char * _text_function(int disp) { return NULL; }

